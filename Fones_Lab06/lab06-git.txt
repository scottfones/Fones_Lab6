Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

	Scott Fones




D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?
	Displays a help screen listing commands for common situations/usage.

	


2.  What does `-ag` cause `git help` to do?
	Displays all git command options and some guides



G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?
	git status reports the current branch, and the staged/unstaged changes	




2.  What does `git add names.txt` do?
	adds names.txt to the local index, telling git that it should be tracked




3.  What does `git commit -m "Add our names."` do?
	stores the current contents of the index with "Add our names." as the log message for the next commit.



Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	git add . adds all applicable files in the current directory.
	The . represents the current directory, opposed to .. for the previous directory


    ```

5.  What does `git commit` (without -m) do?

    ```

	commits the files and opens up a text editor so a commit message can be added

    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```

	git commit would allow use of the text editor. Using the text editor should allow a more robust message.

    ```

7.  What does `git log do`?

    ```

	git log prints the log of local commits

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
	names.txt

	files added for the next commit


    ```

    **Unstaged**

    ```
	movies.txt
	
	tracked files that have been modified, but not added to the next commit


    ```

    **Untracked**

    ```
	foods.txt

	files that have not yet been added to the index


    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```

	only those in names.txt

    ```

2.  What command do you run to stage changes?

    ```

	git add 

    ```

3.  What command do you run to unstage changes?

    ```

	git reset HEAD <file>

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

	the delta between what is in the working tree and what is in the index

    ```

2.  What does `git diff --cached` display?

    ```

	the delta between the last commit and the current

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```

	git reset HEAD names.txt
	git add ./movies.txt

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

	movies.txt is both staged and unstaged. This occurs because movies.txt was added but 
	not committed, and has since been modified.

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```
	names.txt has changed from modified to deleted under unstaged. This occurs because 
	names.txt is still in the index and an update must occur to remove it.


    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	movies.txt has been deleted in unstaged. A new file "last-movies.txt" now exists as
	untracked. This is due to the rename destroying the first file and creating a new one.


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```

	git add .
	git commit -m "Updated files to the first question 7 of the assignment."

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```

	a log of files and their current state wrt git

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```

	The stage allows a local log of changes to remain seperate from the shared repo. This 
	can be useful when trying code that may break the larger project, or to simple keep
	the shared repo from being updated every few seconds.

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```

	resets to HEAD without touching the index or working tree

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```

	resets to HEAD, while modifying the working tree and index. This causes any changes
	since the last commit to be lost.

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
	hard affects the index and working tree. As stated above, this results in the loss
	of all changes since the last commit.


    ```

3.  What do you think `HEAD` means?

    ```
	The currently checked out commit.	

    ```

4.  What do you think `HEAD^` means?

    ```

	The previously-current checked out commit
    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
